import { ADD_CARD } from '../actions/card.actions'

const initialState = {
  status: 'idle',
  cards: [],
  newCounter: 0
};

let cardsTemp

const card = (state = initialState, action) => {
  switch (action.type) {
    case ADD_CARD:
      cardsTemp = [...state.cards]
      cardsTemp[action.payload.ticker] = action.payload
      state.cards = cardsTemp
      return state
    default:
      return state
  }
}

export default card


// import { fetchCount } from './counterAPI';
// cards : {
//   id: 13,
//   content: {
//     ticker: APPL
//     name: Apple Inc
//   }
// }
// const initialState = {
//   status: 'idle',
//   cards: [],
//   newCounter: 0
// };

// export const fetchCardInfo = createAsyncThunk(
//   'counter/fetchCardInfo',
//   async (ticker) => {
//     const response = await getQuoteData(ticker);
//     console.log("RESP", response)
//     // The value we return becomes the `fulfilled` action payload
//     return response;
//   }
// );

// export const cardSlice = createSlice({
//   name: 'card',
//   initialState,
//   reducers: {
//     // addCard: (state, action) => {
//     //   state.cards.concat(card)
//     //   state.newCounter += 1
//     // },
//     removeCard: (state, action) => {
//       _.reject(state.cards, {id: action.payload})
//       state.newCounter -= 1
//     }
//   },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere,
//   // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//     .addCase(fetchCardInfo.pending, (state) => {
//       state.status = 'loading';
//     })
//     .addCase(fetchCardInfo.fulfilled, (state, action) => {
//       state.status = 'idle';
//       let card = {
//         id: state.newCounter,
//         content: action.payload
//       }
//       state.newCounter += 1
//       state.cards.push(card);
//       console.log("FIM DO FETCH", card,state.cards)
//       });
//   },
// });

// export const {  removeCard } = cardSlice.actions;

// export const selectCards = (state) => state.card.cards;
// export const selectNewCounter = (state) => state.card.newCounter;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// // export const incrementIfOdd = (amount) => (dispatch, getState) => {
// //   const currentValue = selectCount(getState());
// //   if (currentValue % 2 === 1) {
// //     dispatch(incrementByAmount(amount));
// //   }
// // };

// export default cardSlice.reducer;
